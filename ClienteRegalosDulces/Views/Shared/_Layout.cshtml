<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="utf-8">
    <title>Alerts</title>
    <meta name="description" content="Page Description">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no, maximum-scale=5">
    <!-- Standard favicon for browsers -->
    <link rel="icon" href="~/../../img/favicon-32x32.png" type="image/png" sizes="32x32">
    <link rel="icon" href="~/../../img/favicon-16x16.png" type="image/png" sizes="16x16">
    <!-- Apple Touch Icon (iOS) -->
    <link rel="apple-touch-icon" href="~/../../img/apple-touch-icon.png" sizes="180x180">
    <!-- Android/Chrome (Progressive Web App) -->
    <link rel="icon" href="~/../../img/favicon-192x192.png" type="image/png" sizes="192x192">
    <!-- Call App Mode on ios devices -->
    <meta name="mobile-web-app-capable" content="yes">
    <!-- Remove Tap Highlight on Windows Phone IE -->
    <meta name="msapplication-tap-highlight" content="no">
    <!-- Vendor css -->
    <link rel="stylesheet" media="screen, print" href="~/css/bootstrap.css">
    <link rel="stylesheet" media="screen, print" href="~/css/waves.css">
    <!-- Base css -->
    <link rel="stylesheet" media="screen, print" href="~/css/smartapp.css">
    <link rel="stylesheet" media="screen, print" href="~/css/sa-icons.css">
    <link rel="stylesheet" media="screen, print" href="~/scripts/thirdparty/sweetalert/sweetalert2.min.css">
    <!-- Theme Style -->
    <link id="theme-style" rel="stylesheet" media="screen, print">
    <!-- Page specific CSS -->
    @await RenderSectionAsync("Styles", required: false)
</head>
    <body>
        <script>
            //hint: place this right after 'body' tag for instantaneous loading
            'use strict';
            var htmlRoot = document.getElementsByTagName('HTML')[0],
                //save states
                savePanelStateEnabled = true,
                //mobile operator on
                mobileOperator = function()
                {
                    // Check user agent
                    const userAgent = navigator.userAgent.toLowerCase();
                    const isMobileUserAgent = /iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(userAgent);
                    // Check for touch support
                    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
                    // Check screen size (optional)
                    const isSmallScreen = window.innerWidth <= 992; // Adjust the breakpoint as needed
                    // Return true if any of the conditions are met
                    return isMobileUserAgent || isTouchDevice || isSmallScreen;
                },
                //filter
                filterClass = function(t, e)
                {
                    return String(t).split(/[^\w-]+/).filter(function(t)
                    {
                        return e.test(t)
                    }).join(' ')
                },
                //load
                loadSettings = function()
                {
                    var t = localStorage.getItem('layoutSettings') || '',
                        e = t ? JSON.parse(t) :
                        {};
                    // Load theme setting
                    var savedTheme = e.theme || 'light';
                    htmlRoot.setAttribute('data-bs-theme', savedTheme);
                    // Load theme style CSS file only if one was saved
                    var themeStyle = e.themeStyle || '';
                    if (themeStyle)
                    {
                        loadThemeStyle(themeStyle);
                    }
                    return Object.assign(
                    {
                        htmlRoot: '',
                        theme: savedTheme,
                        themeStyle: themeStyle
                    }, e)
                },
                //save
                saveSettings = function()
                {
                    layoutSettings.htmlRoot = filterClass(htmlRoot.className, /^(set)-/i);
                    layoutSettings.theme = htmlRoot.getAttribute('data-bs-theme') || 'light';
                    // Save theme style CSS path
                    var themeStyleElement = document.getElementById('theme-style');
                    if (themeStyleElement)
                    {
                        layoutSettings.themeStyle = themeStyleElement.getAttribute('href');
                    }
                    else
                    {
                        layoutSettings.themeStyle = '';
                    }
                    localStorage.setItem("layoutSettings", JSON.stringify(layoutSettings));
                    savingIndicator();
                },
                //reset
                resetSettings = function()
                {
                    localStorage.setItem("layoutSettings", "");
                    // reset data-bs-theme
                    htmlRoot.setAttribute('data-bs-theme', 'light');
                    // reset theme style element if it exists
                    document.getElementById('theme-style').setAttribute('href', '');
                    // refresh page
                    window.location.reload();
                },
                //load theme style
                loadThemeStyle = function(themeStyle)
                {
                    // Get existing theme style if it exists
                    var existingThemeStyle = document.getElementById('theme-style');
                    if (existingThemeStyle)
                    {
                        // Update existing theme style's href
                        existingThemeStyle.href = themeStyle || '';
                    }
                    else if (themeStyle)
                    {
                        // Create new theme style element if none exists and themeStyle is provided
                        var linkElement = document.createElement('link');
                        linkElement.id = 'theme-style';
                        linkElement.rel = 'stylesheet';
                        linkElement.href = themeStyle;
                        document.head.appendChild(linkElement);
                    }
                },
                //get page id
                getPageIdentifier = function()
                {
                    return window.location.pathname.split('/').pop() || 'index.html';
                },
                //save panel state
                savePanelState = function()
                {
                    if (!savePanelStateEnabled) return;
                    var state = [];
                    var columns = document.querySelectorAll('.main-content > .row > [class^="col-"]');
                    columns.forEach(function(column, columnIndex)
                    {
                        var panels = column.querySelectorAll('.panel');
                        panels.forEach(function(panel, position)
                        {
                            var panelHeader = panel.querySelector('.panel-hdr');
                            // Save panel classes excluding 'panel' and 'panel-fullscreen'
                            var panelClasses = panel.className.split(' ').filter(function(cls)
                            {
                                return cls !== 'panel' && cls !== 'panel-fullscreen';
                            }).join(' ');
                            // Save header classes excluding 'panel-hdr'
                            var headerClasses = panelHeader ? panelHeader.className.split(' ').filter(function(cls)
                            {
                                return cls !== 'panel-hdr';
                            }).join(' ') : '';
                            state.push(
                            {
                                id: panel.id,
                                column: columnIndex,
                                position: position, // Save position within column
                                classes: panelClasses,
                                headerClasses: headerClasses
                            });
                        });
                    });
                    var pageId = getPageIdentifier();
                    var allStates = JSON.parse(localStorage.getItem('allPanelStates') || '{}');
                    allStates[pageId] = state;
                    localStorage.setItem('allPanelStates', JSON.stringify(allStates));
                    savingIndicator();
                },
                loadPanelState = function()
                {
                    var pageId = getPageIdentifier();
                    var allStates = JSON.parse(localStorage.getItem('allPanelStates') || '{}');
                    var savedState = allStates[pageId];
                    if (!savedState) return;
                    // Use same selector as save function
                    var columns = Array.from(document.querySelectorAll('.main-content > .row > [class^="col-"]'));
                    // Store all existing panels in a map before removing them
                    var panelMap = {};
                    columns.forEach(function(column)
                    {
                        var existingPanels = Array.from(column.querySelectorAll('.panel'));
                        existingPanels.forEach(function(panel)
                        {
                            panelMap[panel.id] = panel;
                            panel.remove();
                        });
                    });
                    // Sort state by column and position
                    savedState.sort(function(a, b)
                    {
                        if (a.column === b.column)
                        {
                            return a.position - b.position;
                        }
                        return a.column - b.column;
                    });
                    // Reinsert panels in correct order
                    savedState.forEach(function(item)
                    {
                        var panel = panelMap[item.id];
                        if (panel && columns[item.column])
                        {
                            // Update panel classes
                            panel.className = 'panel ' + (item.classes || '');
                            // Update header classes
                            var panelHeader = panel.querySelector('.panel-hdr');
                            if (panelHeader && item.headerClasses)
                            {
                                panelHeader.className = 'panel-hdr ' + item.headerClasses;
                            }
                            // Append to correct column
                            columns[item.column].appendChild(panel);
                        }
                    });
                },
                //reset panel state
                resetPanelState = function()
                {
                    var pageId = getPageIdentifier();
                    var allStates = JSON.parse(localStorage.getItem('allPanelStates') || '{}');
                    delete allStates[pageId];
                    localStorage.setItem('allPanelStates', JSON.stringify(allStates));
                    //refresh page
                    window.location.reload();
                },
                savingIndicator = function()
                {
                    // Create or get the indicator element
                    let indicator = document.getElementById('saving-indicator');
                    if (!indicator)
                    {
                        indicator = document.createElement('div');
                        indicator.id = 'saving-indicator';
                        document.body.appendChild(indicator);
                    }
                    // Show saving animation
                    //indicator.textContent = '';
                    indicator.className = 'saving-indicator spinner-border show';
                    // After a brief delay, show success and hide
                    setTimeout(() =>
                    {
                        //indicator.textContent = '';
                        indicator.className = 'saving-indicator spinner-border show success';
                        setTimeout(() =>
                        {
                            indicator.className = 'saving-indicator spinner-border success';
                        }, 500);
                    }, 300);
                },
                //load page layout settings
                layoutSettings = loadSettings();
            layoutSettings.htmlRoot && (htmlRoot.className = layoutSettings.htmlRoot);
            //load panel settings is triggered just before <script> tag
        </script>

        <div class="app-wrap">
            <partial name="_TopBar">

            <partial name="_NavBar">

            <main class="app-body">
                <div class="app-content">
                    <div class="content-wrapper">
                        <div class="main-content">
                            <div class="row" id="sortable-grid">
                                @RenderBody()
                            </div>
                        </div>
                    </div>
                </div>

                <partial name="_Footer">
            </main>

            <!--we use js-* extension to indicate a hook for a script reference-->
            <aside class="app-drawer js-app-drawer">
                <button type="button" class="btn btn-system position-absolute top-0 end-0 z-2 overflow-hidden p-3" data-action="toggle-swap" data-toggleclass="open" data-target="aside.js-app-drawer" aria-label="Close">
                    <svg class="sa-icon sa-icon-2x">
                        <use href="../../img/sprite.svg#x"></use>
                    </svg>
                </button>
                <div class="custom-scrollbar h-100 p-0">
                    <div class="d-flex flex-grow-1 p-0 w-100 h-100">
                        <!-- left sidebar -->
                        <div class="d-flex flex-column flex-grow-1 flex-0 overflow-x-auto h-100">
                            <div class="flex-wrap align-items-center flex-grow-1 position-relative bg-gray-50">
                                <div class="position-absolute top-0 bottom-0 w-100 overflow-hidden d-flex flex-column">
                                    <!-- chat container -->
                                    <div class="w-100 p-4 pb-0 px-lg-3 bg-subtlelight-fade custom-scroll flex-grow-1 d-flex flex-column">
                                        <h4 class="mb-g fw-300"><span class="fw-500">Hi Sunny</span>, <br> how can I help you today?</h4>
                                        <p class="mt-auto ms-auto mb-2 btn btn-outline-default px-2 py-1 fw-500 fs-xs text-gradient"> Analyze my data </p>
                                        <p class="ms-auto mb-2 btn btn-outline-default px-2 py-1 fs-xs fw-500 text-gradient"> Create a new report </p>
                                        <p class="ms-auto mb-2 btn btn-outline-default px-2 py-1 fs-xs fw-500 text-gradient"> Summarize my Calendar </p>
                                    </div>
                                    <!-- chat input -->
                                    <div class="bg-faded m-3 rounded height-auto">
                                        <textarea rows="2" class="form-control px-2 rounded-top" placeholder="Ask me anything"></textarea>
                                        <div class="d-flex align-items-center py-2 px-2 border border-top-0 rounded-bottom">
                                            <div class="d-flex gap-1 flex-row align-items-center flex-wrap flex-shrink-0">
                                                <button class="btn btn-icon fs-xl flex-shrink-0" type="button" data-bs-toggle="tooltip" data-bs-original-title="Attach Files or Photos" data-bs-placement="top">
                                                    <svg class="sa-icon sa-bold sa-icon-subtlelight">
                                                        <use href="../../img/sprite.svg#file"></use>
                                                    </svg>
                                                </button>
                                                <button class="btn btn-icon fs-xl width-1 flex-shrink-0" type="button" data-bs-toggle="tooltip" data-bs-original-title="Voice" data-bs-placement="top">
                                                    <svg class="sa-icon sa-bold sa-icon-subtlelight">
                                                        <use href="../../img/sprite.svg#mic"></use>
                                                    </svg>
                                                </button>
                                            </div>
                                            <button class="btn btn-icon fs-xl width-1 flex-shrink-0 ms-auto" type="button" data-bs-toggle="tooltip" data-bs-original-title="Send" data-bs-placement="top">
                                                <svg class="sa-icon sa-bold sa-icon-subtlelight sa-icon-2x">
                                                    <use href="../../img/sprite.svg#arrow-up-circle"></use>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </aside>

            <div class="backdrop" data-action="toggle-swap" data-toggleclass="open" data-target="aside.js-app-drawer"></div>
            <aside class="app-drawer js-drawer-settings">
                <div class="app-drawer-header">
                    <h5 class="mb-0"> App Builder <small class="text-muted mt-1 mb-0">Get your app fully customized</small>
                    </h5>
                    <button type="button" class="btn btn-system ms-auto" data-action="toggle-swap" data-toggleclass="open" data-target="aside.js-drawer-settings" aria-label="Close">
                        <svg class="sa-icon sa-icon-2x">
                            <use href="../../img/sprite.svg#x"></use>
                        </svg>
                    </button>
                </div>
                <div class="custom-scrollbar h-100">
                    <div class="info-container"> Unlock limitless design potential with 16+ layout combinations and extensive customization options—tailor your dashboard to fit your exact needs. <button type="button" class="btn btn-sm btn-outline-secondary ms-1" data-action="playsound" data-soundpath="media/sound/" data-soundfile="settings-voice.mp3" aria-label="Play Settings Voice">
                            <svg class="sa-icon">
                                <use href="../../img/sprite.svg#volume-2"></use>
                            </svg>
                        </button>
                    </div>
                    <div class="d-flex justify-content-spaced w-100 app-fob-showcase-text" data-prefix="Preview">
                        <div class="app-fob app-fob-lg app-fob-showcase">
                            <div></div>
                            <div></div>
                            <div></div>
                        </div>
                    </div>
                    <div class="mod-status primary-mod" data-prefix="Primary Settings">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="actionHeaderFixed" data-action="toggle" data-class="set-header-fixed">
                            <label class="form-check-label" for="actionHeaderFixed"> Header position fixed </label>
                        </div>
                        <div class="form-check d-none d-lg-block d-xl-block d-xxl-block">
                            <input class="form-check-input" type="checkbox" id="actionNavFull" data-action="toggle" data-class="set-nav-full" data-codependence="set-nav-collapsed">
                            <label class="form-check-label" for="actionNavFull"> Navigation full height </label>
                        </div>
                    </div>
                    <div class="mod-status d-none d-lg-block d-xl-block d-xxl-block" data-prefix="Addon Settings">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="actionNavFixed" data-action="toggle" data-class="set-nav-fixed">
                            <label class="form-check-label" for="actionNavFixed"> Navigation position fixed </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="actionNavCollapsed" data-action="toggle" data-class="set-nav-collapsed" data-dependency="set-nav-full">
                            <label class="form-check-label" for="actionNavCollapsed"> Navigation collapsed </label>
                        </div>
                    </div>
                    <div class="mod-status" data-prefix="Misc Settings">
                        <div class="form-check d-none d-lg-block d-xl-block d-xxl-block">
                            <input class="form-check-input" type="checkbox" id="actionNavMinified" data-action="toggle" data-class="set-nav-minified">
                            <label class="form-check-label" for="actionNavMinified"> Navigation Minified </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="darkNavigation" data-action="toggle" data-class="set-nav-dark">
                            <label class="form-check-label" for="darkNavigation"> Dark Navigation </label>
                        </div>
                    </div>
                    <div class="mod-status" data-prefix="Aria Settings">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="actionColorblindMode" data-action="toggle" data-class="set-colorblind-mode">
                            <label class="form-check-label" for="actionColorblindMode"> Colorblind Mode </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="actionHighContrastMode" data-action="toggle" data-class="set-high-contrast-mode">
                            <label class="form-check-label" for="actionHighContrastMode"> High Contrast Mode </label>
                        </div>
                    </div>
                    <div class="mod-status app-themes" data-prefix="Themes">
                        <div class="clickable-boxes">
                            <!-- Default -->
                            <input type="radio" id="option0" name="options" data-action="theme-style" data-theme-style="" checked>
                            <label for="option0" data-prefix="Default" style="background: linear-gradient(135deg, #FF6A00, #F6A2D5, #4C91BF, #7A8B92, #AB7C9A);"></label>
                            <!-- Nebula -->
                            <input type="radio" id="option1" name="options" data-action="theme-style" data-theme-style="nebula">
                            <label for="option1" data-prefix="Nebula" style="background: linear-gradient(135deg, #2a7dbf, #2a9d8f, #766cbc, #f4a261, #e76f51);"></label>
                            <!-- Olive -->
                            <input type="radio" id="option2" name="options" data-action="theme-style" data-theme-style="olive">
                            <label for="option2" data-prefix="Olive" style="background: linear-gradient(135deg, #556B2F, #6B8E23, #8B9A3D, #A9B83E, #BDB76B);"></label>
                            <!-- Solar -->
                            <input type="radio" id="option3" name="options" data-action="theme-style" data-theme-style="solar">
                            <label for="option3" data-prefix="Solar" style="background: linear-gradient(135deg, #FF8C00, #FFD700, #FF4500, #F1C40F, #F39C12);"></label>
                            <!-- Lunar -->
                            <input type="radio" id="option4" name="options" data-action="theme-style" data-theme-style="lunar">
                            <label for="option4" data-prefix="Lunar" style="background: linear-gradient(135deg, #2C3E50, #34495E, #5F6368, #AAB7B8, #E6E6FA, #F1F3F4);"></label>
                            <!-- Night -->
                            <input type="radio" id="option5" name="options" data-action="theme-style" data-theme-style="night">
                            <label for="option5" data-prefix="Night" style="background: linear-gradient(135deg, #1e2a47, #2b3654, #363d6c, #4f5d79, #717b91, #b6c4d1);"></label>
                            <!-- Aurora -->
                            <input type="radio" id="option6" name="options" data-action="theme-style" data-theme-style="aurora">
                            <label for="option6" data-prefix="Aurora" style="background: linear-gradient(135deg, #337e7e, #527a4a, #63279b, #7FFF00, #87CEFA, #B0E0E6);"></label>
                            <!-- Earth -->
                            <input type="radio" id="option7" name="options" data-action="theme-style" data-theme-style="earth">
                            <label for="option7" data-prefix="Earth" style="background: linear-gradient(135deg, #2198f3, #3173a5, #3f6888, #618d48, #52bf11);"></label>
                            <!-- Flare -->
                            <input type="radio" id="option8" name="options" data-action="theme-style" data-theme-style="flare">
                            <label for="option8" data-prefix="Flare" style="background: linear-gradient(135deg, #FF4500, #FF6347, #F44336, #D32F2F, #B71C1C);"></label>
                            <!-- Storm -->
                            <input type="radio" id="option9" name="options" data-action="theme-style" data-theme-style="storm">
                            <label for="option9" data-prefix="Storm" style="background: linear-gradient(135deg, #2F4F4F, #3B5360, #4B6A6E, #5A7980, #A9A9A9, #FFD700);"></label>
                        </div>
                    </div>
                    <div class="d-flex" style="gap:10px">
                        <button type="button" onclick="appDOM.resetStyle();" class="btn reset-button btn-outline-danger flex-grow-1">&#x21bb; Reset Styles</button>
                        <button type="button" onclick="resetPanelState();" class="btn btn-outline-secondary flex-grow-1">&#x21bb; Reset Panel</button>
                    </div>
                </div>
            </aside>
            <div class="backdrop" data-action="toggle-swap" data-toggleclass="open" data-target="aside.js-drawer-settings"></div>
        </div>

        <div class="backdrop" data-action="toggle-swap" data-toggleclass="app-mobile-menu-open"></div>
        <!-- Running script immediately (before DOMContentLoaded) -->
        <script>
            loadPanelState();
        </script>
        <!-- Core scripts -->
        <script src="~/scripts/smartApp.js"></script>
        <script src="~/scripts/smartNavigation.js"></script>
@*         <script src="~/scripts/smartFilter.js"></script> *@
        <script src="~/scripts/thirdparty/bootstrap/bootstrap.bundle.js"></script>
        <script src="~/scripts/thirdparty/sweetalert/sweetalert2.all.min.js"></script>
        <script src="~/scripts/jquery-3.7.1.min.js"></script>
        <!-- Dependable scripts -->
        <script src="~/scripts/thirdparty/sortable/sortable.js"></script>
        <!-- Optional scripts -->
        <script src="~/scripts/smartSlimscroll.js"></script>
        <script src="~/scripts/thirdparty/wavejs/waves.js"></script>
        <!-- Page Specific scripts -->
        @await RenderSectionAsync("Scripts", required: false)
        <!-- Run gobal scripts: after all other scripts are loaded -->
        <script>
            /* Initialize the navigation : smartNavigation.js */
            let nav;
            const navElement = document.querySelector('#js-primary-nav');
            if (navElement)
            {
                nav = new Navigation(navElement,
                {
                    accordion: true,
                    slideUpSpeed: 350,
                    slideDownSpeed: 470,
                    closedSign: '<i class="sa sa-chevron-down"></i>',
                    openedSign: '<i class="sa sa-chevron-up"></i>',
                    initClass: 'js-nav-built',
                    debug: false,
                    instanceId: `nav-${Date.now()}`,
                    maxDepth: 5,
                    sanitize: true,
                    animationTiming: 'easeOutExpo',
                    debounceTime: 0,
                    onError: error => console.error('Navigation error:', error)
                });
            }
            /* Waves Effect : waves.js */
            if (window.Waves)
            {
                Waves.attach('.btn:not(.js-waves-off):not(.btn-switch):not(.btn-panel):not(.btn-system):not([data-action="playsound"]), .js-waves-on', ['waves-themed']);
                Waves.init();
            }
            /* Initialize the list filter : listFilter.js */
            // document.addEventListener('DOMContentLoaded', function()
            // {
            //     /* initialize smartApp.js */
            //     appDOM.checkActiveStyles().debug(false);
            //     /* Initialize the list filter */
            //     var listFilter = new ListFilter('#js-nav-menu', '#searchInput',
            //     {
            //         messageSelector: '.js-filter-message',
            //         debounceWait: 200,
            //         minLength: 2,
            //         caseSensitive: false,
            //         onFilter: function(filter)
            //         {
            //             console.log('Filtering with:', filter);
            //         },
            //         onReset: function()
            //         {
            //             console.log('Filter reset');
            //         }
            //     });
            //     /* Panel Sorting : sortable.js

            //        Initialize Sortable for each column
            //        turn off sortable by adding "sortable-off" class to main-content before init
            //        this will however still load any saved state
            //        remove !mobileOperator() to enable sortable on mobile */
            //     const columns = document.querySelectorAll('.main-content:not(.sortable-off) > .row:not(.sortable-off) > [class^="col-"]');
            //     /* Check if columns exist and Sortable is defined and mobileOperator is false */
            //     if (columns.length > 0 && typeof Sortable !== 'undefined' && !mobileOperator())
            //     {
            //         /* Initialize Sortable for each column */
            //         columns.forEach(column =>
            //         {
            //             Sortable.create(column,
            //             {
            //                 animation: 150,
            //                 ghostClass: 'panel-selected',
            //                 handle: '.panel-hdr > h2',
            //                 filter: '.panel-locked',
            //                 draggable: '.panel:not(.panel-locked):not(.panel-fullscreen)',
            //                 group: 'sapanels',
            //                 onEnd: function()
            //                 {
            //                     savePanelState();
            //                 }
            //             });
            //         });
            //         /* Add class to app-content if sortable is active */
            //         document.querySelector('.main-content').classList.add('sortable-active');
            //     }
            //     else
            //     {
            //         document.querySelector('.main-content').classList.add('sortable-inactive');
            //     }
            //     /* Customized Scrollbar : smartSlimScroll.js */
            //     /* Initialize smartSlimScroll if not on mobile - In mobile we use native scrollbar for better UX */
            //     if (!mobileOperator())
            //     {
            //         /* Initialize smartSlimScroll */
            //         new smartSlimScroll('.custom-scroll',
            //         {
            //             height: '100%',
            //             size: '4px',
            //             position: 'right',
            //             color: '#000',
            //             alwaysVisible: false,
            //             railVisible: true,
            //             railColor: '#222',
            //             railOpacity: 0,
            //             wheelStep: 10,
            //             offsetX: '6px',
            //             offsetY: '8px'
            //         });
            //     }
            //     else
            //     {
            //         document.getElementsByTagName('BODY')[0].classList.add('no-slimscroll');
            //     }
            // });
            /* Initialize tooltips: bootstrap.bundle.js */
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl)
            {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })
            /* Initialize popovers: bootstrap.bundle.js */
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            var popoverList = popoverTriggerList.map(function(popoverTriggerEl)
            {
                return new bootstrap.Popover(popoverTriggerEl)
            })
            /* Set default dropdown behavior: bootstrap.bundle.js */
            bootstrap.Dropdown.Default.autoClose = 'outside';
            /* Inject additional scripts dynamically */
        </script>
    </body>
</html>
